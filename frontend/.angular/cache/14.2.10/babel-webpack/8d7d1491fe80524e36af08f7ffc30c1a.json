{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/marko/OneDrive/Desktop/PIA Projekat 2/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { EventEmitter } from '@angular/core';\nimport { firstValueFrom } from 'rxjs';\nimport { WEBSITE_URL, USER_TYPES } from '@shared/consts';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AccountService {\n  constructor(http) {\n    this.http = http;\n    this.user_type = USER_TYPES.none;\n    this.user_id = -1;\n    this.user_change = new EventEmitter();\n    this.endpoint_address = WEBSITE_URL + \"/account\";\n  }\n\n  set_user(id = -1, type = USER_TYPES.none) {\n    this.user_type = type;\n    this.user_id = id;\n    this.user_change.emit(this.user_type);\n  }\n\n  check_login() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let post = _this.http.post(_this.endpoint_address + '/check_login', {}, {\n        withCredentials: true\n      });\n\n      yield firstValueFrom(post).then(response => _this.set_user(response['user_id'], response['user_type']), error => {\n        _this.set_user();\n\n        return error;\n      });\n    })();\n  }\n\n  login(username, password) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let post = _this2.http.post(_this2.endpoint_address + '/login', {\n        username: username,\n        password: password\n      }, {\n        withCredentials: true\n      });\n\n      yield firstValueFrom(post).then(response => _this2.set_user(response['user_id'], response['user_type']), error => {\n        _this2.set_user();\n\n        return error;\n      });\n    })();\n  }\n\n  register(user) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let post_body = {\n        user: user\n      };\n\n      let post = _this3.http.post(_this3.endpoint_address + '/register', post_body); // TODO\n\n\n      yield firstValueFrom(post);\n    })();\n  }\n\n  change_info(user) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      let post_body = {\n        user: user\n      };\n\n      let post = _this4.http.post(_this4.endpoint_address + '/change_info', post_body, {\n        withCredentials: true\n      });\n\n      yield firstValueFrom(post);\n    })();\n  }\n\n  get_info() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      let post = _this5.http.post(_this5.endpoint_address + '/get_info', {}, {\n        withCredentials: true\n      });\n\n      firstValueFrom(post).then(response => response);\n    })();\n  }\n\n  forgotten_password(email) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      let post = _this6.http.post(_this6.endpoint_address + '/forgotten_password', {\n        email: email\n      });\n\n      yield firstValueFrom(post);\n    })();\n  }\n\n  change_user_password(old_password, new_password) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      let post = _this7.http.post(_this7.endpoint_address + '/change_user_password', {\n        old_password: old_password,\n        new_password: new_password\n      }, {\n        withCredentials: true\n      });\n\n      yield firstValueFrom(post);\n    })();\n  }\n\n  change_forgotten_password(verification_code, new_password) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      let post = _this8.http.post(_this8.endpoint_address + '/change_password', {\n        verification_code: verification_code,\n        new_password: new_password\n      }, {\n        withCredentials: true\n      });\n\n      yield firstValueFrom(post);\n    })();\n  }\n\n  logout() {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      let post = _this9.http.post(_this9.endpoint_address + '/logout', {}, {\n        withCredentials: true\n      });\n\n      yield firstValueFrom(post).then(() => _this9.set_user(), error => {\n        _this9.set_user();\n\n        return error;\n      });\n    })();\n  }\n\n}\n\nAccountService.ɵfac = function AccountService_Factory(t) {\n  return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AccountService,\n  factory: AccountService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","firstValueFrom","WEBSITE_URL","USER_TYPES","AccountService","constructor","http","none","set_user","id","type","user_type","user_id","user_change","emit","check_login","post","endpoint_address","withCredentials","then","response","error","login","username","password","register","user","post_body","change_info","get_info","forgotten_password","email","change_user_password","old_password","new_password","change_forgotten_password","verification_code","logout","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\marko\\OneDrive\\Desktop\\PIA Projekat 2\\frontend\\src\\app\\shared\\services\\account.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { firstValueFrom } from 'rxjs';\n\nimport User from '@shared/models/user';\nimport { WEBSITE_URL, USER_TYPES } from '@shared/consts';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n\n  user_type: USER_TYPES = USER_TYPES.none;\n  user_id: number = -1;\n  user_change: EventEmitter<number> = new EventEmitter();\n\n  private endpoint_address: string = WEBSITE_URL + \"/account\";\n\n  constructor(private http: HttpClient) { }\n\n  set_user(id:number = -1, type: USER_TYPES = USER_TYPES.none) {\n    this.user_type = type;\n    this.user_id = id;\n    this.user_change.emit(this.user_type);\n  }\n\n  async check_login() {\n    let post = this.http.post(\n      this.endpoint_address + '/check_login',\n      {},\n      { withCredentials: true }\n    );\n\n    await firstValueFrom(post).then(\n      (response) => this.set_user(response['user_id'], response['user_type']),\n      (error: HttpErrorResponse) => { this.set_user(); return error; }\n    );\n  }\n\n  async login(username: string, password: string) {\n    let post = this.http.post(\n      this.endpoint_address + '/login',\n      { username: username, password: password },\n      { withCredentials: true }\n    );\n\n    await firstValueFrom(post).then(\n      (response) => this.set_user(response['user_id'], response['user_type']),\n      (error: HttpErrorResponse) => { this.set_user(); return error; }\n    );\n  }\n\n  async register(user: User) {\n    let post_body = {\n      user: user\n    };\n\n    let post = this.http.post(\n      this.endpoint_address + '/register',\n      post_body\n    );\n\n    // TODO\n    await firstValueFrom(post);\n  }\n\n  async change_info(user: User) {\n    let post_body = {\n      user: user\n    };\n\n    let post = this.http.post(\n      this.endpoint_address + '/change_info',\n      post_body,\n      { withCredentials: true }\n    );\n\n    await firstValueFrom(post);\n  }\n\n  async get_info() {\n    let post = this.http.post(\n      this.endpoint_address + '/get_info',\n      { },\n      { withCredentials: true }\n    );\n\n    firstValueFrom(post).then(\n      (response) => response\n    );\n  }\n\n  async forgotten_password(email) {\n    let post = this.http.post(\n      this.endpoint_address + '/forgotten_password',\n      { email: email }\n    );\n\n    await firstValueFrom(post);\n  }\n\n  async change_user_password(old_password: string, new_password: string) {\n    let post = this.http.post(\n      this.endpoint_address + '/change_user_password',\n      { old_password: old_password, new_password: new_password },\n      { withCredentials: true }\n    );\n\n    await firstValueFrom(post);\n  }\n\n  async change_forgotten_password(verification_code: string, new_password: string) {\n    let post = this.http.post(\n      this.endpoint_address + '/change_password',\n      { verification_code: verification_code, new_password: new_password },\n      { withCredentials: true }\n    );\n\n    await firstValueFrom(post);\n  }\n\n  async logout() {\n    let post = this.http.post(\n      this.endpoint_address + '/logout',\n      { },\n      { withCredentials: true }\n    );\n\n    await firstValueFrom(post).then(\n      () => this.set_user(),\n      (error: HttpErrorResponse) => { this.set_user(); return error; }\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}